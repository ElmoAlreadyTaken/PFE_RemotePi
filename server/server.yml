swagger: "2.0"
info:
  title: "RemotePi API"
  description: "API for managing and interacting with robots remotely"
  version: "1.0.1"
basePath: "/"
schemes:
  - "http"
  - "https"
paths:
  /:
    get:
      summary: "Redirect to the Swagger UI documentation"
      responses:
        302:
          description: "Redirected to /doc"

  /swagger.yaml:
    get:
      summary: "Serve the Swagger YAML file"
      responses:
        200:
          description: "Swagger YAML file served successfully"

  /template:
    get:
      summary: "Retrieve the Arduino code template"
      responses:
        200:
          description: "Template retrieved successfully"

  /upload:
    post:
      summary: "Upload a file to a specific robot"
      consumes:
        - "multipart/form-data"
      parameters:
        - in: "formData"
          name: "file"
          type: "file"
          description: "The file to upload"
          required: true
        - in: "formData"
          name: "robotId"
          type: "string"
          description: "The ID of the robot to upload the file to"
          required: true
      responses:
        200:
          description: "File uploaded and committed successfully"

  /register:
    post:
      summary: "Create and register a new robot"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to register a robot"
          required: true
          schema:
            type: "object"
            properties:
              ip:
                type: "string"
              board:
                type: "string"
              reserved:
                type: "boolean"
      responses:
        200:
          description: "Robot registered successfully"

  /unregister:
    post:
      summary: "Unregister an existing robot"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "ID of the robot to unregister"
          required: true
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
      responses:
        200:
          description: "Robot unregistered successfully"

  /robots:
    get:
      summary: "List all robots"
      responses:
        200:
          description: "List of robots returned successfully"

  /robots/{robot_id}:
    get:
      summary: "Get information about a specific robot"
      parameters:
        - in: "path"
          name: "robot_id"
          type: "string"
          required: true
          description: "The ID of the robot"
      responses:
        200:
          description: "Robot information returned successfully"

  /robots/{robot_id}/status:
    get:
      summary: "Get the status of a specific robot"
      parameters:
        - in: "path"
          name: "robot_id"
          type: "string"
          required: true
          description: "The ID of the robot"
      responses:
        200:
          description: "Robot status returned successfully"

  /robots/free:
    get:
      summary: "List all free robots"
      parameters:
        - in: "query"
          name: "board"
          type: "string"
          description: "Optional board type to filter free robots"
      responses:
        200:
          description: "List of free robots returned successfully"

  /free/{robot_id}:
    post:
      summary: "Free a specific robot"
      parameters:
        - in: "path"
          name: "robot_id"
          type: "string"
          required: true
          description: "The ID of the robot to free"
      responses:
        200:
          description: "Robot freed successfully"

  /camera:
    post:
      summary: "Control the camera"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Command to start or stop the camera"
          required: true
          schema:
            type: "object"
            properties:
              command:
                type: "string"
      responses:
        200:
          description: "Camera command executed successfully"

  /log:
    post:
      summary: "Post a log message"
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Log message to post"
          required: true
          schema:
            type: "object"
            properties:
              message:
                type: "string"
      responses:
        200:
          description: "Log message posted successfully"
    get:
      summary: "Get log messages"
      responses:
        200:
          description: "Log messages returned successfully"
